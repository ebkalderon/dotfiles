#!/bin/bash

#
# packages/programs/package
#

DESCRIPTION='Configures pacman, installs AUR client, installs programs.'
INSTALL_MSG='Installing applications...'
UNINSTALL_MSG='Restoring applications...'

install() {
  echo -n 'checking if platform is Arch Linux... '
  local pacman_bin="$(which pacman)"
  if [[ -n ${pacman_bin} ]]; then
    success
  else
    failure
    echo 'skipping installation...'
    return 1
  fi

  echo -n 'copying pacman.conf... '
  cp /etc/pacman.conf ${BACKUPS}
  if execute sudo cp "${PACKAGE_FILES}/pacman.conf" /etc/pacman.conf; then
    sudo chmod 644 /etc/pacman.conf
  else
    return 1
  fi

  echo -n 'refreshing pacman mirrors... '
  execute sudo ${pacman_bin} -Sy

  echo -n 'building and installing trizen for AUR support... '
  pushd ${PACKAGE_FILES}/trizen/ &> /dev/null
  execute makepkg --syncdeps --clean --force && \
    sudo ${pacman_bin} -U --noconfirm trizen-*.pkg.tar.xz &> /dev/null
  popd &> /dev/null

  for program in $(cat "${PACKAGE_FILES}"/*.list); do
    echo -n "installing ${program}... "

    if ! ${pacman_bin} -Qq ${program} &> /dev/null; then
      echo "${program}" >> "${BACKUPS}/programs_added"
    fi

    execute sudo pacman -S --noconfirm "${program}"
  done
}

uninstall() {
  local oldest_conf="$(find ~/.dotfiles_old/ -name pacman.conf | head -1)"

  echo -n 'restoring old pacman.conf... '
  if execute sudo cp "${oldest_conf}" /etc/pacman.conf; then
    sudo chmod 644 /etc/pacman.conf
  else
    return 1
  fi

  local programs_added="$(find ~/.dotfiles_old/ -name programs_added)"

  if [[ -n ${programs_added} ]]; then
    local programs="$(cat ${programs_added} | sort -u)"

    for program in ${programs}; do
      echo -n "uninstalling ${program}... "
      execute sudo pacman -R --noconfirm "${program}"
    done
  fi

  echo -n 'uninstalling trizen...'
  execute sudo pacman -R --noconfirm trizen
}

post_update() {
  echo -n 'checking for system updates... '
  execute sudo pacman -Syu --noconfirm
  return $?
}
