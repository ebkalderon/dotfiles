#!/usr/bin/env bash

#
# packages/configs/package
#

DESCRIPTION='Symlinks the included dotfiles to their appropriate locations.'
INSTALL_MSG='Applying dotfiles...'
UNINSTALL_MSG='Restoring dotfiles...'
PLATFORM='ANY'

install() {
  local stow_command="stow --dir=\"${PACKAGE_FILES}\" --target=\"${HOME}\" --dotfiles"

  if [[ "${PLATFORM}" == 'MACOS' ]]; then
    stow_command="${stow_command} --ignore='^(dot-gdbinit|\\.local\\/share\\/applications|dot-xinitrc)'"
  else
    stow_command="${stow_command} --ignore='^dot-cointop'"
  fi

  # Create symlinks, printing any differences between existing ~/ and stowed one
  eval "${stow_command} --adopt --stow home"
  git diff HEAD
  eval "${stow_command} --restow home"

  # Update .bashrc with correct dotfiles location if not set
  sed -i.bak "s,DOTFILES=.*,DOTFILES=\"${DOTFILES}\",g" "${PACKAGE_FILES}/home/dot-bashrc" \
    && rm "${PACKAGE_FILES}/home/dot-bashrc.bak"

  # Create mpd playlist directory and empty database file
  running 'creating mpd playlist directory...'
  execute mkdir -p "${HOME}/.mpd/playlists"
  running 'updating mpd database...'
  execute touch "${HOME}/.mpd/database"

  # Install Neovim plugins
  running 'installing Neovim plugins... '
  if command -v nvim > /dev/null; then
    execute nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
  else
    failure
    echo 'Neovim is not installed'
    return 1
  fi
}

uninstall() {
  return
}
