#!/bin/bash

#
# lib/package
#
# Functions for handling dotfiles packages.
#

readonly BACKUP_DIR="${HOME}/.dotfiles_old/$(date +'%Y.%m.%d.%H.%M.%S')"
readonly PACKAGES="$(find "${DOTFILES}/packages/" -name 'package' -type f | sort)"

packages_list() {
  for package in ${PACKAGES}; do
    _load_package "${package}"

    printf '  %-9s %s\n' "${PACKAGE_NAME}" "${DESCRIPTION}"
  done
}

packages_install() {
  for package in ${PACKAGES}; do
    _load_package "${package}"

    header "${INSTALL_MSG}"
    mkdir -p "${BACKUPS}"
    install
  done
}

packages_uninstall() {
  for package in ${PACKAGES}; do
    _load_package "${package}"

    header "${UNINSTALL_MSG}"
    uninstall
  done
}

packages_pre_update() {
  header 'Triggering pre-updates...'

  for package in ${PACKAGES}; do
    _load_package "${package}"
    pre_update
  done
}

packages_post_update() {
  header 'Triggering post-updates...'

  for package in ${PACKAGES}; do
    _load_package "${package}"
    post_update
  done
}

_load_package() {
  local package="$1"

  # Unset all package-defined functions, just in case
  for fn in install uninstall pre_update post_update; do
    eval "${fn}() { return; }"
  done

  # Set default values for available variables
  PACKAGE_FILES="$(dirname "${package}")/files"
  PACKAGE_NAME="$(basename "$(dirname "${package}")")"
  BACKUPS="${BACKUP_DIR}/${PACKAGE_NAME}"
  DESCRIPTION="No description available for ${PACKAGE_NAME}."
  INSTALL_MSG="Installing \"${PACKAGE_NAME}\" package..."
  UNINSTALL_MSG="Uninstalling \"${PACKAGE_NAME}\" package..."

  # Load the contents of the package
  source ${package}
}
