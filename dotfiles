#!/bin/sh

#
# dotfiles
#
# Command-line interface for managing dotfiles
#

readonly DOTFILES="${DOTFILES:=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)}"
readonly VERSION='0.1.0'

# Load the dotfiles helper functions library
for lib in ${DOTFILES}/lib/*; do
  source ${lib}
done

show_help() {
  echo 'dotfiles - Command-line interface for managing dotfiles'
  echo
  echo 'Usage:'
  echo '  dotfiles reload   Reloads current configuration from disk.'
  echo '  dotfiles update   Fetches the latest dotfiles from the Internet.'
  echo
  echo 'Options:'
  echo '  -h --help     Show this screen.'
  echo '  -v --version  Show version.'
  return 0
}

show_version() {
  echo "dotfiles ${VERSION}"
  return 0
}

dotfiles_reload() {
  source ~/.bashrc
  return $?
}

dotfiles_update() {
  packages_pre_update

  # Stash any local uncommitted changes and pull upstream updates
  header 'Pulling upstream updates...'
  git -C "${DOTFILES}" stash --quiet
  git -C "${DOTFILES}" pull

  # Restore any local uncommitted changes
  if git -C "${DOTFILES}" stash show -u &> /dev/null; then
    echo 'Preserved uncommitted changes.'
    git -C "${DOTFILES}" stash pop --quiet
  fi

  packages_post_update
  header 'Update complete.'

  return 0
}

# Parse long options
for arg in "$@"; do
  shift
  case ${arg} in
    --help | help)
      set -- "$@" '-h'
      ;;
    --version | version)
      set -- "$@" '-v'
      ;;
    --*)
      echo "error: invalid option: ${arg}" 1>&2
      exit 1
      ;;
    *)
      set -- "$@" "${arg}"
      ;;
  esac
done

# Parse short options
OPTIND=1
while getopts ':hv' opt; do
  case ${opt} in
    h)
      show_help
      exit 0
      ;;
    v)
      show_version
      exit 0
      ;;
    \?)
      echo "error: invalid option: -${OPTARG}" 1>&2
      exit 1
      ;;
  esac
done
shift "$((OPTIND - 1))"

# Parse subcommands
subcommand="$1"; shift
case ${subcommand} in
  reload)
    dotfiles_reload
    exit $?
    ;;
  update)
    dotfiles_update
    exit $?
    ;;
  *)
    if [[ -z ${subcommand} ]]; then
      echo 'error: no command or flags specified'
    else
      echo "error: invalid subcommand: ${subcommand}"
    fi

    echo 'Try "dotfiles --help" for more information.'
    exit 1
    ;;
esac
